(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{723:function(e,v,r){"use strict";r.r(v);var _=r(16),t=Object(_.a)({},(function(){var e=this,v=e.$createElement,r=e._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"springmvc请求处理流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springmvc请求处理流程"}},[e._v("#")]),e._v(" SpringMVC请求处理流程")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://singerwimg-1300001977.cos.accelerate.myqcloud.com/2021/08/17/3ed0e251bbb80.png",alt:""}})]),e._v(" "),r("p",[r("strong",[e._v("请求过程要会描述，按照课堂讲的内容来组织自己的语言，作为面试的重点关注部分.")])]),e._v(" "),r("ol",[r("li",[r("strong",[e._v("外部请求,找前端控制器(DispatcherServlet)")])]),e._v(" "),r("li",[r("strong",[e._v("前端控制器根据配置信息,查找实际的控制器(sayHello) .可以通过代理请求来完成(实际上比较复杂 前端的解析器,前端的代理适配器等等)")])]),e._v(" "),r("li",[r("strong",[e._v("找到真正的控制器(后端控制器),处理请求")])]),e._v(" "),r("li",[r("strong",[e._v("创建model;功能是将数据返回给视图,数据可能是从业务一侧获取的结果")])]),e._v(" "),r("li",[r("strong",[e._v("携带数据传递给前端控制器")])]),e._v(" "),r("li",[r("strong",[e._v("前端控制器将结果传递给视图,渲染视图")])]),e._v(" "),r("li",[r("strong",[e._v("返回结果给请求一侧(浏览器一侧 )")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://singerwimg-1300001977.cos.accelerate.myqcloud.com/2021/08/18/ff54054d80432.png",alt:""}})]),e._v(" "),r("ol",[r("li",[r("strong",[e._v("向服务器发送 HTTP 请求，请求被前端控制器 "),r("code",[e._v("DispatcherServlet")]),e._v(" 捕获。")])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("DispatcherServlet")]),e._v(" 根据 -servlet.xml 中的配置对请求的 URL 进行解析，得到请求资源标识符（URI）。然后根据该 URI，调用 "),r("code",[e._v("HandlerMapping")]),e._v(" 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以"),r("code",[e._v("HandlerExecutionChain")]),e._v(" 对象的形式返回。")])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("DispatcherServlet")]),e._v(" 根据获得的"),r("code",[e._v("Handler")]),e._v("，选择一个合适的 "),r("code",[e._v("HandlerAdapter")]),e._v("。（附注：如果成功获得"),r("code",[e._v("HandlerAdapter")]),e._v("后，此时将开始执行拦截器的 preHandler(...)方法）。")])]),e._v(" "),r("li",[r("strong",[e._v("提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("HttpMessageConveter： 将请求消息（如 Json、xml 等数据）转换成一个对象，将对象转换为指定的响应信息。")])]),e._v(" "),r("li",[r("strong",[e._v("数据转换：对请求消息进行数据转换。如"),r("code",[e._v("String")]),e._v("转换成"),r("code",[e._v("Integer")]),e._v("、"),r("code",[e._v("Double")]),e._v("等。")])]),e._v(" "),r("li",[r("strong",[e._v("数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等。")])]),e._v(" "),r("li",[r("strong",[e._v("数据验证： 验证数据的有效性（长度、格式等），验证结果存储到"),r("code",[e._v("BindingResult")]),e._v("或"),r("code",[e._v("Error")]),e._v("中。")])])])]),e._v(" "),r("li",[r("strong",[e._v("Handler(Controller)执行完成后，向 "),r("code",[e._v("DispatcherServlet")]),e._v(" 返回一个 "),r("code",[e._v("ModelAndView")]),e._v(" 对象；")])]),e._v(" "),r("li",[r("strong",[e._v("根据返回的"),r("code",[e._v("ModelAndView")]),e._v("，选择一个适合的 "),r("code",[e._v("ViewResolver")]),e._v("（必须是已经注册到 Spring 容器中的"),r("code",[e._v("ViewResolver")]),e._v(")返回给"),r("code",[e._v("DispatcherServlet")]),e._v("。")])]),e._v(" "),r("li",[r("strong",[r("code",[e._v("ViewResolver")]),e._v(" 结合"),r("code",[e._v("Model")]),e._v("和"),r("code",[e._v("View")]),e._v("，来渲染视图。")])]),e._v(" "),r("li",[r("strong",[e._v("视图负责将渲染结果返回给客户端。")])])])])}),[],!1,null,null,null);v.default=t.exports}}]);